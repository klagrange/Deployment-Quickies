#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Oct 29 17:40:28 2018

@author: liujin
"""
import unittest
import numpy as np
import core as cal

class Test_core(unittest.TestCase):
    goals = [51020.40816326531, 102040.81632653062, 204081.63265306124]
    goal_priority = [1,2,3]
    years = [5,10,15]
    ir_per_goal = [0.06,0.06,0.06]
    sigma = [0.10,0.20,0.40]
    frontend_fee = [0.02,0.02,0.02]
    backend_fee = [0.02,0.02,0.02]
    manage_fee = [0.02,0.02,0.02]
    annual_investment = 12000
    initial_investment = 20000

    def test_calculator_ai_equal(self):
        Original_goals_list = [np.array([[0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
       [9050.8368, 3920.0000, 5130.8368, 0.0000, 0.0000, 80.0000],
       [9050.8368, 3920.0000, 5130.8368, 0.0000, 0.0000, 80.0000],
       [9050.8368, 3920.0000, 5130.8368, 0.0000, 0.0000, 80.0000],
       [9050.8368, 3920.0000, 5130.8368, 0.0000, 0.0000, 80.0000],
       [9050.8368, 3920.0000, 5130.8368, 0.0000, 0.0000, 80.0000]]), np.array([[0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
       [7741.6284, 3920.0000, 3821.6284, 0.0000, 0.0000, 80.0000],
       [7741.6284, 3920.0000, 3821.6284, 0.0000, 0.0000, 80.0000],
       [7741.6284, 3920.0000, 3821.6284, 0.0000, 0.0000, 80.0000],
       [7741.6284, 3920.0000, 3821.6284, 0.0000, 0.0000, 80.0000],
       [7741.6284, 3920.0000, 3821.6284, 0.0000, 0.0000, 80.0000],
       [12855.8292, 5880.0000, 6975.8292, 0.0000, 0.0000, 120.0000],
       [12855.8292, 5880.0000, 6975.8292, 0.0000, 0.0000, 120.0000],
       [12855.8292, 5880.0000, 6975.8292, 0.0000, 0.0000, 120.0000],
       [12855.8292, 5880.0000, 6975.8292, 0.0000, 0.0000, 120.0000],
       [12855.8292, 5880.0000, 6975.8292, 0.0000, 0.0000, 120.0000]]), np.array([[0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
       [8767.9110, 3920.0000, 4847.9110, 0.0000, 0.0000, 80.0000],
       [8767.9110, 3920.0000, 4847.9110, 0.0000, 0.0000, 80.0000],
       [8767.9110, 3920.0000, 4847.9110, 0.0000, 0.0000, 80.0000],
       [8767.9110, 3920.0000, 4847.9110, 0.0000, 0.0000, 80.0000],
       [8767.9110, 3920.0000, 4847.9110, 0.0000, 0.0000, 80.0000],
       [12480.9276, 5880.0000, 6600.9276, 0.0000, 0.0000, 120.0000],
       [12480.9276, 5880.0000, 6600.9276, 0.0000, 0.0000, 120.0000],
       [12480.9276, 5880.0000, 6600.9276, 0.0000, 0.0000, 120.0000],
       [12480.9276, 5880.0000, 6600.9276, 0.0000, 0.0000, 120.0000],
       [12480.9276, 5880.0000, 6600.9276, 0.0000, 0.0000, 120.0000],
       [21314.4577, 11760.0000, 9554.4577, 0.0000, 0.0000, 240.0000],
       [21314.4577, 11760.0000, 9554.4577, 0.0000, 0.0000, 240.0000],
       [21314.4577, 11760.0000, 9554.4577, 0.0000, 0.0000, 240.0000],
       [21314.4577, 11760.0000, 9554.4577, 0.0000, 0.0000, 240.0000],
       [21314.4577, 11760.0000, 9554.4577, 0.0000, 0.0000, 240.0000]])]
        ShortfallList =  [29501.4638, 40109.8659, 54936.5533]
        SurplusList =  [0.00, 0.00, 0.00]
        TargetMet =  [0, 0, 0]
        Probs_list =  [7e-06, 0.602212, 0.748585]

        target_met,shortfall_list,surplus_list,probs_list,goals_list = cal.calculator_ai_equal(
                self.goals,self.years,
                self.annual_investment,self.ir_per_goal,
                self.frontend_fee,self.sigma)

        for i in range(len(target_met)):
            self.assertEqual(round(shortfall_list[i],4),ShortfallList[i])
            self.assertEqual(round(surplus_list[i],4),SurplusList[i])
            self.assertEqual(round(probs_list[i],6),Probs_list[i])
            self.assertEqual(round(target_met[i],4),TargetMet[i])
            self.assertEqual(goals_list[i].all(),Original_goals_list[i].all())

    def test_calculator_ai_priority(self):
        Original_goals_list = [np.array([[0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],\
       [9050.8368, 9050.8368, 0.0000, 2768.1465, 1.0000, 181.0167],\
       [9050.8368, 9050.8368, 0.0000, 2768.1465, 1.0000, 181.0167],\
       [9050.8368, 9050.8368, 0.0000, 2768.1465, 1.0000, 181.0167],\
       [9050.8368, 9050.8368, 0.0000, 2768.1465, 1.0000, 181.0167],\
       [9050.8368, 9050.8368, 0.0000, 2768.1465, 1.0000, 181.0167]]), \
        np.array([[0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],\
       [7741.6284, 2712.7836, 5028.8448, 0.0000, 0.0000, 55.3629],\
       [7741.6284, 2712.7836, 5028.8448, 0.0000, 0.0000, 55.3629],\
       [7741.6284, 2712.7836, 5028.8448, 0.0000, 0.0000, 55.3629],\
       [7741.6284, 2712.7836, 5028.8448, 0.0000, 0.0000, 55.3629],\
       [7741.6284, 2712.7836, 5028.8448, 0.0000, 0.0000, 55.3629],\
       [14471.3571, 11760.0000, 2711.3571, 0.0000, 0.0000, 240.0000],\
       [14471.3571, 11760.0000, 2711.3571, 0.0000, 0.0000, 240.0000],\
       [14471.3571, 11760.0000, 2711.3571, 0.0000, 0.0000, 240.0000],\
       [14471.3571, 11760.0000, 2711.3571, 0.0000, 0.0000, 240.0000],\
       [14471.3571, 11760.0000, 2711.3571, 0.0000, 0.0000, 240.0000]]), \
        np.array([[0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],\
       [8767.9110, 0.0000, 8767.9110, 0.0000, 0.0000, 0.0000],\
       [8767.9110, 0.0000, 8767.9110, 0.0000, 0.0000, 0.0000],\
       [8767.9110, 0.0000, 8767.9110, 0.0000, 0.0000, 0.0000],\
       [8767.9110, 0.0000, 8767.9110, 0.0000, 0.0000, 0.0000],\
       [8767.9110, 0.0000, 8767.9110, 0.0000, 0.0000, 0.0000],\
       [15483.2568, 0.0000, 15483.2568, 0.0000, 0.0000, 0.0000],\
       [15483.2568, 0.0000, 15483.2568, 0.0000, 0.0000, 0.0000],\
       [15483.2568, 0.0000, 15483.2568, 0.0000, 0.0000, 0.0000],\
       [15483.2568, 0.0000, 15483.2568, 0.0000, 0.0000, 0.0000],\
       [15483.2568, 0.0000, 15483.2568, 0.0000, 0.0000, 0.0000],\
       [36203.3470, 11760.0000, 24443.3470, 0.0000, 0.0000, 240.0000],\
       [36203.3470, 11760.0000, 24443.3470, 0.0000, 0.0000, 240.0000],\
       [36203.3470, 11760.0000, 24443.3470, 0.0000, 0.0000, 240.0000],\
       [36203.3470, 11760.0000, 24443.3470, 0.0000, 0.0000, 240.0000],\
       [36203.3470, 11760.0000, 24443.3470, 0.0000, 0.0000, 240.0000]])]
        ShortfallList =  [0.0000, 15589.8557, 140545.2078]
        SurplusList =  [15604.2992, 0.0000, 0.0000]
        Probs_list =  [0.934808, 0.834446, 0.329895]
        TargetMet =  [1, 0, 0]

        target_met,shortfall_list,surplus_list,probs_list,goals_list = cal.calculator_ai_priority(self.goals,self.goal_priority,\
                self.years, self.annual_investment,self.ir_per_goal,\
                self.frontend_fee, self.sigma)        
        for i in range(len(target_met)):            
            self.assertEqual(round(target_met[i],4),TargetMet[i])
            self.assertEqual(round(shortfall_list[i],4),ShortfallList[i])
            self.assertEqual(round(surplus_list[i],4),SurplusList[i])
            self.assertEqual(round(probs_list[i],6),Probs_list[i])
            
            self.assertEqual(goals_list[i].all(),Original_goals_list[i].all())

    def test_calculator_ii_ai_equal(self):
        Original_goals_list = [np.array([[38125.4170, 6533.3333, 31592.0836, 0.0000, 0.0000, 133.3333],
       [33487.6087, 3920.0000, 29567.6087, 0.0000, 0.0000, 80.0000],
       [31341.6652, 3920.0000, 27421.6652, 0.0000, 0.0000, 80.0000],
       [29066.9651, 3920.0000, 25146.9651, 0.0000, 0.0000, 80.0000],
       [26655.7830, 3920.0000, 22735.7830, 0.0000, 0.0000, 80.0000],
       [24099.9300, 3920.0000, 20179.9300, 0.0000, 0.0000, 80.0000]]), np.array([[56979.0589, 6533.3333, 50445.7255, 0.0000, 0.0000, 133.3333],
       [53472.4691, 3920.0000, 49552.4691, 0.0000, 0.0000, 80.0000],
       [52525.6172, 3920.0000, 48605.6172, 0.0000, 0.0000, 80.0000],
       [51521.9542, 3920.0000, 47601.9542, 0.0000, 0.0000, 80.0000],
       [50458.0715, 3920.0000, 46538.0715, 0.0000, 0.0000, 80.0000],
       [49330.3558, 3920.0000, 45410.3558, 0.0000, 0.0000, 80.0000],
       [48134.9771, 5880.0000, 42254.9771, 0.0000, 0.0000, 120.0000],
       [44790.2758, 5880.0000, 38910.2758, 0.0000, 0.0000, 120.0000],
       [41244.8923, 5880.0000, 35364.8923, 0.0000, 0.0000, 120.0000],
       [37486.7858, 5880.0000, 31606.7858, 0.0000, 0.0000, 120.0000],
       [33503.1930, 5880.0000, 27623.1930, 0.0000, 0.0000, 120.0000]]), np.array([[85156.1348, 6533.3333, 78622.8015, 0.0000, 0.0000, 133.3333],
       [83340.1696, 3920.0000, 79420.1696, 0.0000, 0.0000, 80.0000],
       [84185.3798, 3920.0000, 80265.3798, 0.0000, 0.0000, 80.0000],
       [85081.3026, 3920.0000, 81161.3026, 0.0000, 0.0000, 80.0000],
       [86030.9807, 3920.0000, 82110.9807, 0.0000, 0.0000, 80.0000],
       [87037.6396, 3920.0000, 83117.6396, 0.0000, 0.0000, 80.0000],
       [88104.6979, 5880.0000, 82224.6979, 0.0000, 0.0000, 120.0000],
       [87158.1798, 5880.0000, 81278.1798, 0.0000, 0.0000, 120.0000],
       [86154.8706, 5880.0000, 80274.8706, 0.0000, 0.0000, 120.0000],
       [85091.3628, 5880.0000, 79211.3628, 0.0000, 0.0000, 120.0000],
       [83964.0446, 5880.0000, 78084.0446, 0.0000, 0.0000, 120.0000],
       [82769.0873, 11760.0000, 71009.0873, 0.0000, 0.0000, 240.0000],
       [75269.6325, 11760.0000, 63509.6325, 0.0000, 0.0000, 240.0000],
       [67320.2105, 11760.0000, 55560.2105, 0.0000, 0.0000, 240.0000],
       [58893.8231, 11760.0000, 47133.8231, 0.0000, 0.0000, 240.0000],
       [49961.8525, 11760.0000, 38201.8525, 0.0000, 0.0000, 240.0000]])]
        ShortfallList =  [20583.5286, 28175.6569, 38965.8895]
        SurplusList = [0.0000, 0.0000, 0.0000]
        Probs_list =  [0.078729, 0.746506, 0.77422]
        TargetMet =  [0, 0, 0]

        target_met,shortfall_list,surplus_list,probs_list,goals_list = cal.calculator_ii_ai_equal(\
                self.goals,self.years,\
                self.initial_investment,self.annual_investment,\
                self.ir_per_goal,self.frontend_fee, self.sigma)
        
        for i in range(len(target_met)):
            self.assertEqual(round(shortfall_list[i],4),ShortfallList[i])
            self.assertEqual(round(surplus_list[i],4),SurplusList[i])
            self.assertEqual(round(probs_list[i],6),Probs_list[i])
            self.assertEqual(round(target_met[i],4),TargetMet[i])
            self.assertEqual(goals_list[i].all(),Original_goals_list[i].all())

    def test_calculator_ii_ai_priority(self):
        Original_goals_list = [np.array([[38125.4170, 19600.0000, 18525.4170, 0.0000, 0.0000, 400.0000],
       [19636.9420, 11760.0000, 7876.9420, 0.0000, 0.0000, 240.0000],
       [8349.5585, 8349.5585, 0.0000, 3483.4503, 1.0000, 166.9912],
       [0.0000, 0.0000, 0.0000, 0.0000, 1.0000, 0.0000],
       [0.0000, 0.0000, 0.0000, 0.0000, 1.0000, 0.0000],
       [0.0000, 0.0000, 0.0000, 0.0000, 1.0000, 0.0000]]), 
        np.array([[56979.0589, 0.0000, 56979.0589, 0.0000, 0.0000, 0.0000],
       [60397.8024, 0.0000, 60397.8024, 0.0000, 0.0000, 0.0000],
       [64021.6705, 3413.7813, 60607.8892, 0.0000, 0.0000, 69.6690],
       [64244.3626, 11760.0000, 52484.3626, 0.0000, 0.0000, 240.0000],
       [55633.4244, 11760.0000, 43873.4244, 0.0000, 0.0000, 240.0000],
       [46505.8298, 11760.0000, 34745.8298, 0.0000, 0.0000, 240.0000],
       [36830.5796, 11760.0000, 25070.5796, 0.0000, 0.0000, 240.0000],
       [26574.8144, 11760.0000, 14814.8144, 0.0000, 0.0000, 240.0000],
       [15703.7032, 11760.0000, 3943.7032, 0.0000, 0.0000, 240.0000],
       [4180.3254, 4180.3254, 0.0000, 7736.0681, 1.0000, 83.6065],
       [0.0000, 0.0000, 0.0000, 0.0000, 1.0000, 0.0000]]), 
        np.array([[85156.1348, 0.0000, 85156.1348, 0.0000, 0.0000, 0.0000],
       [90265.5029, 0.0000, 90265.5029, 0.0000, 0.0000, 0.0000],
       [95681.4331, 0.0000, 95681.4331, 0.0000, 0.0000, 0.0000],
       [101422.3191, 0.0000, 101422.3191, 0.0000, 0.0000, 0.0000],
       [107507.6582, 0.0000, 107507.6582, 0.0000, 0.0000, 0.0000],
       [113958.1177, 0.0000, 113958.1177, 0.0000, 0.0000, 0.0000],
       [120795.6048, 0.0000, 120795.6048, 0.0000, 0.0000, 0.0000],
       [128043.3411, 0.0000, 128043.3411, 0.0000, 0.0000, 0.0000],
       [135725.9416, 0.0000, 135725.9416, 0.0000, 0.0000, 0.0000],
       [143869.4980, 7581.3467, 136288.1514, 0.0000, 0.0000, 154.7214],
       [144465.4404, 11760.0000, 132705.4404, 0.0000, 0.0000, 240.0000],
       [140667.7669, 11760.0000, 128907.7669, 0.0000, 0.0000, 240.0000],
       [136642.2329, 11760.0000, 124882.2329, 0.0000, 0.0000, 240.0000],
       [132375.1668, 11760.0000, 120615.1668, 0.0000, 0.0000, 240.0000],
       [127852.0769, 11760.0000, 116092.0769, 0.0000, 0.0000, 240.0000],
       [123057.6015, 11760.0000, 111297.6015, 0.0000, 0.0000, 240.0000]])]
        ShortfallList =  [0.0000, 0.0000, 113523.5535]
        SurplusList =  [4148.8451, 8200.2321, 0.0000]
        TargetMet =  [1, 1, 0]
        Probs_list =  [0.934808, 0.894431, 0.5506]

        target_met,shortfall_list,surplus_list,probs_list,goals_list = cal.calculator_ii_ai_priority(
                self.goals,self.goal_priority, self.years,
                self.initial_investment,self.annual_investment,
                self.ir_per_goal,self.frontend_fee, self.sigma)
        for i in range(len(target_met)):
            self.assertEqual(round(shortfall_list[i],4),ShortfallList[i])
            self.assertEqual(round(surplus_list[i],4),SurplusList[i])
            self.assertEqual(round(probs_list[i],6),Probs_list[i])
            self.assertEqual(round(target_met[i],4),TargetMet[i])
            self.assertEqual(goals_list[i].all(),Original_goals_list[i].all())

    def test_calculator_ii_equal_ai_priority(self):
        Original_goals_list = [np.array([[38125.4170, 6533.3333, 31592.0836, 0.0000, 0.0000, 133.3333],
       [33487.6087, 11760.0000, 21727.6087, 0.0000, 0.0000, 240.0000],
       [23031.2652, 11760.0000, 11271.2652, 0.0000, 0.0000, 240.0000],
       [11947.5411, 11760.0000, 187.5411, 0.0000, 0.0000, 240.0000],
       [198.7936, 198.7936, 0.0000, 11797.2306, 1.0000, 3.9759],
       [0.0000, 0.0000, 0.0000, 0.0000, 1.0000, 0.0000]]), 
        np.array([[56979.0589, 6533.3333, 50445.7255, 0.0000, 0.0000, 133.3333],
       [53472.4691, 0.0000, 53472.4691, 0.0000, 0.0000, 0.0000],
       [56680.8172, 0.0000, 56680.8172, 0.0000, 0.0000, 0.0000],
       [60081.6662, 0.0000, 60081.6662, 0.0000, 0.0000, 0.0000],
       [63686.5662, 11561.2860, 52125.2803, 0.0000, 0.0000, 235.9446],
       [55252.7971, 11760.0000, 43492.7971, 0.0000, 0.0000, 240.0000],
       [46102.3649, 11760.0000, 34342.3649, 0.0000, 0.0000, 240.0000],
       [36402.9068, 11760.0000, 24642.9068, 0.0000, 0.0000, 240.0000],
       [26121.4812, 11760.0000, 14361.4812, 0.0000, 0.0000, 240.0000],
       [15223.1701, 11760.0000, 3463.1701, 0.0000, 0.0000, 240.0000],
       [3670.9603, 3670.9603, 0.0000, 8255.6205, 1.0000, 73.4192]]), 
        np.array([[85156.1348, 6533.3333, 78622.8015, 0.0000, 0.0000, 133.3333],
       [83340.1696, 0.0000, 83340.1696, 0.0000, 0.0000, 0.0000],
       [88340.5798, 0.0000, 88340.5798, 0.0000, 0.0000, 0.0000],
       [93641.0146, 0.0000, 93641.0146, 0.0000, 0.0000, 0.0000],
       [99259.4754, 0.0000, 99259.4754, 0.0000, 0.0000, 0.0000],
       [105215.0440, 0.0000, 105215.0440, 0.0000, 0.0000, 0.0000],
       [111527.9466, 0.0000, 111527.9466, 0.0000, 0.0000, 0.0000],
       [118219.6234, 0.0000, 118219.6234, 0.0000, 0.0000, 0.0000],
       [125312.8008, 0.0000, 125312.8008, 0.0000, 0.0000, 0.0000],
       [132831.5689, 0.0000, 132831.5689, 0.0000, 0.0000, 0.0000],
       [140801.4630, 8090.5081, 132710.9549, 0.0000, 0.0000, 165.1124],
       [140673.6122, 11760.0000, 128913.6122, 0.0000, 0.0000, 240.0000],
       [136648.4289, 11760.0000, 124888.4289, 0.0000, 0.0000, 240.0000],
       [132381.7346, 11760.0000, 120621.7346, 0.0000, 0.0000, 240.0000],
       [127859.0387, 11760.0000, 116099.0387, 0.0000, 0.0000, 240.0000],
       [123064.9810, 11760.0000, 111304.9810, 0.0000, 0.0000, 240.0000]])]
        ShortfallList =  [0.0000, 0.0000, 113531.0807]
        SurplusList =  [12505.0644, 8255.6205, 0.0000]
        TargetMet =  [1, 1, 0]
        Probs_list =  [0.934808, 0.894431, 0.550556]

        target_met,shortfall_list,surplus_list,probs_list,goals_list = cal.calculator_ii_equal_ai_priority(
                self.goals,self.goal_priority,self.years,
                self.initial_investment,self.annual_investment,
                self.ir_per_goal,self.frontend_fee, self.sigma)
        for i in range(len(target_met)):
            self.assertEqual(round(shortfall_list[i],4),ShortfallList[i])
            self.assertEqual(round(surplus_list[i],4),SurplusList[i])
            self.assertEqual(round(probs_list[i],6),Probs_list[i])
            self.assertEqual(round(target_met[i],4),TargetMet[i])
            self.assertEqual(goals_list[i].all(),Original_goals_list[i].all())

    def test_calculator_ii_priority_ai_equal(self):
        Original_goals_list = [np.array([[38125.4170, 19600.0000, 18525.4170, 0.0000, 0.0000, 400.0000],
       [19636.9420, 3920.0000, 15716.9420, 0.0000, 0.0000, 80.0000],
       [16659.9585, 3920.0000, 12739.9585, 0.0000, 0.0000, 80.0000],
       [13504.3560, 3920.0000, 9584.3560, 0.0000, 0.0000, 80.0000],
       [10159.4174, 3920.0000, 6239.4174, 0.0000, 0.0000, 80.0000],
       [6613.7824, 3920.0000, 2693.7824, 0.0000, 0.0000, 80.0000]]), 
        np.array([[56979.0589, 0.0000, 56979.0589, 0.0000, 0.0000, 0.0000],
       [60397.8024, 3920.0000, 56477.8024, 0.0000, 0.0000, 80.0000],
       [59866.4705, 3920.0000, 55946.4705, 0.0000, 0.0000, 80.0000],
       [59303.2588, 3920.0000, 55383.2588, 0.0000, 0.0000, 80.0000],
       [58706.2543, 3920.0000, 54786.2543, 0.0000, 0.0000, 80.0000],
       [58073.4296, 3920.0000, 54153.4296, 0.0000, 0.0000, 80.0000],
       [57402.6353, 5880.0000, 51522.6353, 0.0000, 0.0000, 120.0000],
       [54613.9935, 5880.0000, 48733.9935, 0.0000, 0.0000, 120.0000],
       [51658.0331, 5880.0000, 45778.0331, 0.0000, 0.0000, 120.0000],
       [48524.7150, 5880.0000, 42644.7150, 0.0000, 0.0000, 120.0000],
       [45203.3980, 5880.0000, 39323.3980, 0.0000, 0.0000, 120.0000]]), 
        np.array([[85156.1348, 0.0000, 85156.1348, 0.0000, 0.0000, 0.0000],
       [90265.5029, 3920.0000, 86345.5029, 0.0000, 0.0000, 80.0000],
       [91526.2331, 3920.0000, 87606.2331, 0.0000, 0.0000, 80.0000],
       [92862.6071, 3920.0000, 88942.6071, 0.0000, 0.0000, 80.0000],
       [94279.1635, 3920.0000, 90359.1635, 0.0000, 0.0000, 80.0000],
       [95780.7133, 3920.0000, 91860.7133, 0.0000, 0.0000, 80.0000],
       [97372.3561, 5880.0000, 91492.3561, 0.0000, 0.0000, 120.0000],
       [96981.8975, 5880.0000, 91101.8975, 0.0000, 0.0000, 120.0000],
       [96568.0114, 5880.0000, 90688.0114, 0.0000, 0.0000, 120.0000],
       [96129.2920, 5880.0000, 90249.2920, 0.0000, 0.0000, 120.0000],
       [95664.2496, 5880.0000, 89784.2496, 0.0000, 0.0000, 120.0000],
       [95171.3045, 11760.0000, 83411.3045, 0.0000, 0.0000, 240.0000],
       [88415.9828, 11760.0000, 76655.9828, 0.0000, 0.0000, 240.0000],
       [81255.3418, 11760.0000, 69495.3418, 0.0000, 0.0000, 240.0000],
       [73665.0623, 11760.0000, 61905.0623, 0.0000, 0.0000, 240.0000],
       [65619.3660, 11760.0000, 53859.3660, 0.0000, 0.0000, 240.0000]])]
        ShortfallList =  [2747.6581, 40109.8659, 54936.5533]
        SurplusList =  [0.00, 0.00, 0.00]
        TargetMet =  [0, 0, 0]
        Probs_list =  [0.896761, 0.602212, 0.748585]

        target_met,shortfall_list,surplus_list,probs_list,goals_list = cal.calculator_ii_priority_ai_equal(
                self.goals,self.goal_priority,self.years,
                self.initial_investment,self.annual_investment,
                self.ir_per_goal,self.frontend_fee, self.sigma)
        for i in range(len(target_met)):
            self.assertEqual(round(shortfall_list[i],4),ShortfallList[i])
            self.assertEqual(round(surplus_list[i],4),SurplusList[i])
            self.assertEqual(round(probs_list[i],6),Probs_list[i])
            self.assertEqual(round(target_met[i],4),TargetMet[i])
            self.assertEqual(goals_list[i].all(),Original_goals_list[i].all())

if __name__ == '__main__':
    unittest.main()


